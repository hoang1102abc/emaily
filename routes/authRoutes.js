const passport = require("passport");

module.exports = app => {
  app.get(
    "/auth/google",
    passport.authenticate("google", {
      scope: ["profile", "email"]
    })
  );

  app.get(
    "/auth/google/callback",
    passport.authenticate("google"),
    (req, res) => {
      res.redirect("/surveys");
    }
  );

  app.get("/api/logout", (req, res) => {
    req.logout();
    res.redirect("/");
  });

  app.get("/api/current_user", (req, res) => {
    // res.send(req.session);
    res.send(req.user);
  });
};

//Users come in /auth/google -> cookie-session and passport middlewares kick in
//-> tie the users to a particular cookie (in this case: cookie data will say 'empty')
//passport sees that there's no users id in the cookie
//pass it to passport.authenticate
//user gets prompted to google consent screen -> permission granted
//passport run verify callback in config -> add the user to our database if it's new ||
//if their google ID records match data returned from google then pass in on next stage
//-> pass the user to (serializeUser) -> passport takes out user.id(id generated by MongoDB)
//-> encrypt it and stick it to user cookie(lasts for 30 days)

//in future, user comes back into our app to view their data
//-> passport pulls out cookie data and (deserializeUser) gets called
//app finds user as per its ID and return it which is populated in req.user
